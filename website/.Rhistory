plot.title = element_text(face = "bold", size = 18, family = "Optima"),
axis.title.x = element_text(size = 16, family = "Optima"),
axis.title.y = element_text(size = 16, family = "Optima"),
axis.text.x = element_text(size = 14, family = "Optima"),
axis.text.y = element_text(size = 14, family = "Optima")
) +
scale_x_continuous(
breaks = as.Date(paste0(seq(1970, 2020, 10), "-01-01"))
)
line_plot_df <- water_levels %>%
# Drop data_qual
select(-c(data_qual)) %>%
# Drop na
drop_na()
water_level_plot <- ggplot(
data = line_plot_df,
aes(x = datetime, y = water_level_ft)
) +
geom_line(color = "#10241B") +
geom_point(
data = line_plot_df,
aes(x = as.Date("1989-10-01"),
y = water_level_ft[datetime == as.Date("1989-10-01")]),
color = "#10241B",
fill = "#CCBB88",
size = 2,
pch = 21
) +
geom_label(
aes(
x = as.Date("1989-10-01"),
y = water_level_ft[datetime == as.Date("1989-10-01")],
label = "10/01/1989: Measurement frequency switches\nfrom bi-monthly to daily",
),
nudge_x = 5000,
nudge_y = 1.75,
size = 3,
color = "#10241B",
fill = "#CCBB88"
) +
labs(
title = "Great Salt Lake Water Levels by Time",
x = "Date",
y = "Water Elevation (ft)"
)
water_level_plot +
theme(
plot.title = element_text(face = "bold", size = 18, family = "Optima"),
axis.title.x = element_text(size = 16, family = "Optima"),
axis.title.y = element_text(size = 16, family = "Optima"),
axis.text.x = element_text(size = 14, family = "Optima"),
axis.text.y = element_text(size = 14, family = "Optima")
) +
scale_x_continuous(
breaks = as.Date(paste0(seq(1970, 2020, 10), "-01-01")),
labels = seq(1970, 2020, 10)
)
install.packages(c("data.table", "DT"))
library(rayshader)
library(sp)
library(raster)
library(scales)
library(rgdal)
library(magick)
# Read in the rasters directly rather than processing them again
# gsl_elevation <- raster("../../data/modified/rasters/gsl_elevation_utm.gri")
#
# gsl_bathymetry <- raster(
#   "../../data/raw/Tarboton_USU/GSL_Bathymetry/data/contents/GSLDEM/GSLDEM.vrt"
# )
#
# plot(union(extent(gsl_elevation), extent(gsl_bathymetry)))
# lines(extent(gsl_elevation), lwd=3, col = "blue")
# lines(extent(gsl_bathymetry), lwd = 3, col = "red")
#
# gsl_bath2 <- resample(gsl_bathymetry, gsl_elevation, method = "bilinear")
#
# # Save newly resized raster
# writeRaster(
#   gsl_bath2,
#   "../../data/modified/rasters/gsl_bathymetry",
#   overwrite = TRUE
# )
#
# # Overlay elevation and topography
# gsl_overlay <- mosaic(gsl_elevation, gsl_bath2, fun=min)
#
# # Save overlay raster
# writeRaster(
#   gsl_overlay,
#   "../../data/modified/rasters/gsl_overlay",
#   overwrite = TRUE
# )
gsl_elevation <- raster("../../data/modified/rasters/gsl_elevation_utm.gri")
gsl_bathymetry <- raster("../../data/modified/rasters/gsl_bathymetry")
gsl_overlay <- raster("../../data/modified/rasters/gsl_overlay")
# Plot
height_shade(raster_to_matrix(gsl_overlay)) %>%
plot_map()
raster_to_matrix(
raster(
"../../data/raw/Tarboton_USU/GSL_Bathymetry/data/contents/GSLDEM/GSLDEM.tif"
)
) %>%
sphere_shade() %>%
plot_map()
raster_to_matrix(gsl_elevation) %>%
sphere_shade() %>%
plot_map()
bottom_left = c(y=-113.307704, x=40.527373)
top_right = c(y=-111.472865, x=41.830442)
extent_latlong = sp::SpatialPoints(rbind(bottom_left, top_right), proj4string=sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84"))
extent_utm = sp::spTransform(extent_latlong, raster::crs(gsl_overlay))
e = raster::extent(extent_utm)
e
# Crop raster
gsl_elevation_cropped <- raster::crop(gsl_elevation, e)
gsl_cropped <- raster::crop(gsl_overlay, e)
# Convert to matrix and set elevation to feet
elevation_matrix <- raster_to_matrix(gsl_cropped)
elevation_matrix_ft <- elevation_matrix * 3.28084
gsl_rgb_cropped = raster::crop(
brick("../../data/modified/rasters/gsl_rbg.gri"),
e
)
names(gsl_rgb_cropped) = c("r","g","b")
gsl_r_cropped = rayshader::raster_to_matrix(gsl_rgb_cropped$r)
gsl_g_cropped = rayshader::raster_to_matrix(gsl_rgb_cropped$g)
gsl_b_cropped = rayshader::raster_to_matrix(gsl_rgb_cropped$b)
gsl_rgb_array = array(0,dim=c(nrow(gsl_r_cropped),ncol(gsl_r_cropped),3))
gsl_rgb_array[,,1] = gsl_r_cropped/255 # Red layer
gsl_rgb_array[,,2] = gsl_g_cropped/255 # Green layer
gsl_rgb_array[,,3] = gsl_b_cropped/255 # Blue layer
gsl_rgb_array = aperm(gsl_rgb_array, c(2,1,3))
gsl_rgb_contrast = scales::rescale(gsl_rgb_array,to=c(0,1))
water_palette <- colorRampPalette(c("#10241B", "#4E6B3E"))(200)
bathy_hs <- height_shade(elevation_matrix_ft, texture = water_palette)
elevation_matrix_ft %>%
sphere_shade(
zscale = 10,
texture = create_texture(
lightcolor = "#CCBB88",
shadowcolor = "#383423",
leftcolor = "#69563E",
rightcolor = "#343527",
centercolor = "#DACDA1",
cornercolors = "#574738"
)
) %>%
add_overlay(generate_altitude_overlay(bathy_hs, elevation_matrix_ft, 4205, 4210)) %>%
plot_map()
water_palette <- colorRampPalette(c("#10241B", "#4E6B3E"))(200)
bathy_hs <- height_shade(elevation_matrix_ft, texture = water_palette)
elevation_matrix_ft %>%
sphere_shade(
texture = "imhof4"
# texture = create_texture(
#   lightcolor = "#CCBB88",
#   shadowcolor = "#383423",
#   leftcolor = "#69563E",
#   rightcolor = "#343527",
#   centercolor = "#DACDA1",
#   cornercolors = "#574738"
# )
) %>%
add_overlay(generate_altitude_overlay(bathy_hs, elevation_matrix_ft, 4205, 4210)) %>%
plot_map()
elevation_matrix_ft %>%
sphere_shade(
texture = "imhof4"
# texture = create_texture(
#   lightcolor = "#CCBB88",
#   shadowcolor = "#383423",
#   leftcolor = "#69563E",
#   rightcolor = "#343527",
#   centercolor = "#DACDA1",
#   cornercolors = "#574738"
# )
) %>%
add_overlay(generate_altitude_overlay(bathy_hs, elevation_matrix_ft, 4184, 4189)) %>%
plot_map()
elevation_matrix_ft %>%
sphere_shade(
zscale = 10,
texture = create_texture(
lightcolor = "#CCBB88",
shadowcolor = "#383423",
leftcolor = "#69563E",
rightcolor = "#343527",
centercolor = "#DACDA1",
cornercolors = "#574738"
)
) %>%
add_overlay(gsl_rgb_contrast) %>%
add_overlay(generate_altitude_overlay(bathy_hs, elevation_matrix_ft, 4205, 4210)) %>%
plot_map()
elevation_matrix_ft %>%
sphere_shade(
zscale = 10,
texture = create_texture(
lightcolor = "#CCBB88",
shadowcolor = "#383423",
leftcolor = "#69563E",
rightcolor = "#343527",
centercolor = "#DACDA1",
cornercolors = "#574738"
)
) %>%
add_overlay(gsl_rgb_contrast) %>%
add_overlay(generate_altitude_overlay(bathy_hs, elevation_matrix_ft, 4184, 4189)) %>%
plot_map()
2+2
plot_3d(
gsl_rgb_contrast, elevation_matrix_ft,
windowsize = c(1920,1080),
zscale = 15,
shadowdepth = -50,
zoom=0.65,
phi=30,
theta=0,
fov=70,
background = "white",
shadowcolor = "#523E2B",
water = TRUE,
waterdepth = 4184
)
render_snapshot(
title_color = "white",
title_bar_alpha = 1
)
plot_3d(
gsl_rgb_contrast, elevation_matrix_ft,
windowsize = c(1920,1080),
zscale = 15,
shadowdepth = -50,
zoom=0.5,
phi=30,
theta=0,
fov=70,
background = "white",
shadowcolor = "#523E2B",
water = TRUE,
waterdepth = 4184
)
render_snapshot(
title_color = "white",
title_bar_alpha = 1
)
plot_3d(
gsl_rgb_contrast, elevation_matrix_ft,
windowsize = c(1920,1080),
zscale = 15,
shadowdepth = -50,
zoom=0.5,
phi=45,
theta=0,
fov=70,
background = "white",
shadowcolor = "#523E2B",
water = TRUE,
waterdepth = 4184,
watercolor = "#1B2C25"
)
render_snapshot(
title_color = "white",
title_bar_alpha = 1
)
library(tidyverse)
# Import data
elevation.df <- read.csv(
"../../data/raw/USGS_Water_Levels/usgs_water_levels.tsv",
sep = "\t",
skip = 29
)
View(elevation.df)
# Import data
elevation.df <- read.csv(
"../../data/raw/USGS_Water_Levels/usgs_water_levels.tsv",
sep = "\t",
skip = 29
)[-c(1),]
View(elevation.df)
elevation.df
# Import data
elevation.df <- read.csv(
"../../data/raw/USGS_Water_Levels/usgs_water_levels.tsv",
sep = "\t",
skip = 29
)[-c(1),] %>%
rename(
"elev_ft" = "X178324_62614_00003"
)
library(tidyverse)
# Import data
elevation.df <- read.csv(
"../../data/raw/USGS_Water_Levels/usgs_water_levels.tsv",
sep = "\t",
skip = 29
)[-c(1),] %>%
rename(
"elev_ft" = "X178324_62614_00003"
) %>%
select(c(datetime, elev_ft)) %>%
drop_na()
# Import data
elevation.df <- read.csv(
"../../data/raw/USGS_Water_Levels/usgs_water_levels.tsv",
sep = "\t",
skip = 29
)[-c(1),] %>%
rename(
"elev_ft" = "X178324_62614_00003"
) %>%
select(c(datetime, elev_ft)) %>%
filter(elev_ft != "") %>%
mutate(
datetime = as.Date(datetime)
)
library(tidyverse)
# Import data
elevation.df <- read.csv(
"../../data/raw/USGS_Water_Levels/usgs_water_levels.tsv",
sep = "\t",
skip = 29
)[-c(1),] %>%
rename(
"elev_ft" = "X178324_62614_00003"
) %>%
select(c(datetime, elev_ft)) %>%
filter(elev_ft != "") %>%
mutate(
datetime = as.Date(datetime),
elev_ft = as.numeric(elev_ft)
)
View(elevation.df)
plot_3d(
gsl_rgb_contrast, elevation_matrix_ft,
windowsize = c(1920,1080),
zscale = 15,
shadowdepth = -50,
zoom=0.5,
phi=45,
theta=0,
fov=70,
background = "white",
shadowcolor = "#523E2B",
water = TRUE,
waterdepth = min(elevation.df$elev_ft),
watercolor = "#1B2C25"
)
render_snapshot(
title_color = "white",
title_bar_alpha = 1
)
plot_3d(
gsl_rgb_contrast, elevation_matrix_ft,
windowsize = c(1920,1080),
zscale = 15,
shadowdepth = -50,
zoom=0.5,
phi=45,
theta=0,
fov=70,
background = "white",
shadowcolor = "#523E2B",
water = TRUE,
waterdepth = max(elevation.df$elev_ft),
watercolor = "imhof2"
)
render_snapshot(
title_color = "white",
title_bar_alpha = 1
)
?rgl::snapshot3d
## Brine Shrimp
In addition to posing a public health concern, the decline of the Great Salt Lake has significant implications for the brine shrimp population and the entire ecosystem that depends on it. Brine shrimp are an important part of the lake's food chain and play a critical role in maintaining the lake's ecosystem.
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(extrafont))
water_levels <- read.csv(
"../data/raw/USGS_Water_Levels/usgs_water_levels.tsv",
sep = '\t', # Tab-separated
skip = 29 # Skip first 29 rows
) %>%
# Drop first row after header
filter(!row_number() %in% c(1)) %>%
# Drop agency_cd and site_no columns
select(-c(agency_cd, site_no)) %>%
# Rename columns
rename(
water_level_ft = X178324_62614_00003,
data_qual = X178324_62614_00003_cd
) %>%
# Change columns to proper type
mutate(
datetime = as.Date(datetime),
water_level_ft = as.numeric(water_level_ft),
data_qual = as.factor(data_qual)
)
line_plot_df <- water_levels %>%
# Drop data_qual
select(-c(data_qual)) %>%
# Drop na
drop_na()
water_level_plot <- ggplot(
data = line_plot_df,
aes(x = datetime, y = water_level_ft)
) +
geom_line(color = "#10241B") +
# geom_point(
#   data = line_plot_df,
#   aes(x = as.Date("1989-10-01"),
#       y = water_level_ft[datetime == as.Date("1989-10-01")]),
#   color = "#10241B",
#   fill = "#CCBB88",
#   size = 2,
#   pch = 21
# ) +
# geom_label(
#   aes(
#     x = as.Date("1989-10-01"),
#     y = water_level_ft[datetime == as.Date("1989-10-01")],
#     label = "10/01/1989: Measurement frequency switches\nfrom bi-monthly to daily",
#   ),
#   nudge_x = 5300,
#   nudge_y = 1.75,
#   size = 3,
#   color = "#10241B",
#   fill = "#CCBB88"
# ) +
labs(
title = "Great Salt Lake Water Levels by Time",
x = "Date",
y = "Water Elevation (ft)"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 18, family = "Optima"),
axis.title.x = element_text(size = 16, family = "Optima"),
axis.title.y = element_text(size = 16, family = "Optima"),
axis.text.x = element_text(size = 14, family = "Optima"),
axis.text.y = element_text(size = 14, family = "Optima")
) +
scale_x_continuous(
breaks = as.Date(paste0(seq(1970, 2020, 10), "-01-01")),
labels = seq(1970, 2020, 10)
)
ggsave(
"../img/poster/plots/line.svg",
device = 'svg',
width = 5.5,
height = 3,
units = "in"
)
install.packages('svglite')
line_plot_df <- water_levels %>%
# Drop data_qual
select(-c(data_qual)) %>%
# Drop na
drop_na()
water_level_plot <- ggplot(
data = line_plot_df,
aes(x = datetime, y = water_level_ft)
) +
geom_line(color = "#10241B") +
# geom_point(
#   data = line_plot_df,
#   aes(x = as.Date("1989-10-01"),
#       y = water_level_ft[datetime == as.Date("1989-10-01")]),
#   color = "#10241B",
#   fill = "#CCBB88",
#   size = 2,
#   pch = 21
# ) +
# geom_label(
#   aes(
#     x = as.Date("1989-10-01"),
#     y = water_level_ft[datetime == as.Date("1989-10-01")],
#     label = "10/01/1989: Measurement frequency switches\nfrom bi-monthly to daily",
#   ),
#   nudge_x = 5300,
#   nudge_y = 1.75,
#   size = 3,
#   color = "#10241B",
#   fill = "#CCBB88"
# ) +
labs(
title = "Great Salt Lake Water Levels by Time",
x = "Date",
y = "Water Elevation (ft)"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 18, family = "Optima"),
axis.title.x = element_text(size = 16, family = "Optima"),
axis.title.y = element_text(size = 16, family = "Optima"),
axis.text.x = element_text(size = 14, family = "Optima"),
axis.text.y = element_text(size = 14, family = "Optima")
) +
scale_x_continuous(
breaks = as.Date(paste0(seq(1970, 2020, 10), "-01-01")),
labels = seq(1970, 2020, 10)
)
ggsave(
"../img/poster/plots/line.svg",
device = 'svg',
width = 5.5,
height = 3,
units = "in"
)
water_level_plot
getwd()
